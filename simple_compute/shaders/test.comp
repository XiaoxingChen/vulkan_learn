#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WIDTH 10
#define HEIGHT 10
#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1 ) in;

layout(std140, binding = 0) buffer buf
{
   vec4 imageData[];
};

void main() {

  /*
  In order to fit the work into workgroups, some unnecessary threads are launched.
  We terminate those threads here.
  */
  if(gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT)
    return;
  // if(gl_GlobalInvocationID.x != 0 || gl_GlobalInvocationID.y != 0)
  //   return;

  // float x = float(gl_GlobalInvocationID.x) / float(WIDTH);
  // float y = float(gl_GlobalInvocationID.y) / float(HEIGHT);

  // store the rendered mandelbrot set into a storage buffer:
  imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].x = 0.1 + float(gl_GlobalInvocationID.x);
  imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].y = 0.2 + float(gl_GlobalInvocationID.x);
  imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].z = 0.3 + float(gl_GlobalInvocationID.x);
  imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x].w = 0.4 + float(gl_GlobalInvocationID.x);
  // imageData[WIDTH * gl_GlobalInvocationID.y + gl_GlobalInvocationID.x]
  //   = float(gl_GlobalInvocationID.x) + float(gl_GlobalInvocationID.y) * 0.1f;
  // imageData[0].x = 0.1f;
  // imageData[0].y = 0.f;
  // imageData[1].x = 1.f;
  // imageData[2].x = 2.f;
}